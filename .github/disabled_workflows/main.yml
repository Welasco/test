# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RG: "Automation-Actions-OPNAZURE-twonics" #The resource group we're deploying to.
  ParamFilePath: "main.parameters.json" #Path to parameter file
  TemplateFilePath: "main.bicep"
  DEPNAME: "Dep-OPNsense-${{ github.run_number }}" #Deployment Name
  AZCLIVERSION: 2.29.2 #Pinning to a specific AZ CLI version

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
      # Runs a single command using the runners shell
    #  - name: Run a one-line script
    #    run: |
    #      curl -k https://www.bingasdfouwerkhsdifuy.com --verbose
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      # Runs a single command using the runners shell
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: Deploy Infrastructure
        id: deploystg
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            DEPNAME='${{ env.DEPNAME }}'
            az deployment group create -f ${{ env.TemplateFilePath }} -g $RG -p ${{ env.ParamFilePath }} --name $DEPNAME --verbose
            
            DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            echo $DEPSTATUS          
  Cleanup:
    runs-on: ubuntu-latest
    needs: [build]
    #if: github.event_name == 'schedule'
    if: always()
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts
          Install-Module -Name Az.Resources

      - name: Cleanup
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'

          # Get all ARM resources from all resource groups
          $rgToPurge = Get-AzResourceGroup -Name $RG
          try {
            #Remove all but public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -ne "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Remove public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -eq "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Final run to clean other dependant resources in parent-child graph
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | Remove-AzResource -Force
          }
          Catch #we're wanting to suppress failures in this step. If it fails to clean, the nightly automation will catch it.
          {
            write-output error
          }
